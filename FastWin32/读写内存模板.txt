        #region 读写{0}
        #region 读取{0}
        /// <summary>
        /// 读取{0}
        /// </summary>
        /// <param name="processId">进程ID</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public static bool Read{1}(uint processId, IntPtr addr, out {2} value)
        {
            return TemplateOfRead(processId, addr, out value, (IntPtr hProcess, IntPtr addrCallback, out {2} buffer) => Read{1}Internal(hProcess, addrCallback, out buffer));
        }
        
        /// <summary>
        /// 读取{0}
        /// </summary>
        /// <param name="processId">进程ID</param>
        /// <param name="p">指针</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public static bool Read{1}(uint processId, Pointer p, out {2} value)
        {
            return TemplateOfRead(processId, p, out value, (IntPtr hProcess, IntPtr addrCallback, out {2} buffer) => Read{1}Internal(hProcess, addrCallback, out buffer));
        }
        
        /// <summary>
        /// 读取{0}
        /// </summary>
        /// <param name="processInfo">进程信息</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        internal static unsafe bool Read{1}Internal(ProcessInfo processInfo, IntPtr addr, out {2} value)
        {
            return ReadProcessMemory(processInfo.Handle, addr, out value, {3}, null);
        }
        
        /// <summary>
        /// 读取{0}
        /// </summary>
        /// <param name="hProcess">进程句柄</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        internal static unsafe bool Read{1}Internal(IntPtr hProcess, IntPtr addr, out {2} value)
        {
            return ReadProcessMemory(hProcess, addr, out value, {3}, null);
        }
        #endregion
        
        #region 写入{0}
        /// <summary>
        /// 写入{0}
        /// </summary>
        /// <param name="processId">进程ID</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public static bool Write{1}(uint processId, IntPtr addr, {2} value)
        {
            return TemplateOfWrite(processId, addr, (IntPtr hProcess, IntPtr addrCallback) => Write{1}Internal(hProcess, addrCallback, value));
        }
        
        /// <summary>
        /// 写入{0}
        /// </summary>
        /// <param name="processId">进程ID</param>
        /// <param name="p">指针</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public static bool Write{1}(uint processId, Pointer p, {2} value)
        {
            return TemplateOfWrite(processId, p, (IntPtr hProcess, IntPtr addrCallback) => Write{1}Internal(hProcess, addrCallback, value));
        }
        
        /// <summary>
        /// 写入{0}
        /// </summary>
        /// <param name="processInfo">进程信息</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        internal static unsafe bool Write{1}Internal(ProcessInfo processInfo, IntPtr addr, {2} value)
        {
            return WriteProcessMemory(processInfo.Handle, addr, ref value, {3}, null);
        }
        
        /// <summary>
        /// 写入{0}
        /// </summary>
        /// <param name="hProcess">进程句柄</param>
        /// <param name="addr">地址</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        internal static unsafe bool Write{1}Internal(IntPtr hProcess, IntPtr addr, {2} value)
        {
            return WriteProcessMemory(hProcess, addr, ref value, {3}, null);
        }
        #endregion
        #endregion
        